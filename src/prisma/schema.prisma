
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  TEACHER
  USER
}

enum Status {
  ACTIVE
  INACTIVE
}

enum QuestionType {
  MCQ
  SHORT
  LONG
}

enum DifficultyLevel {
  EASY
  MEDIUM
  HARD
}

model User {
  id        String   @id @default(uuid())
  email     String?  @unique
  password  String?
  name      String?
  role      UserRole?  @default(TEACHER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model School {
  id        String   @id @default(uuid())
  type      String?  @unique
  grades    Grade[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Grade {
  id        String    @id @default(uuid())
  school    School?   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId  String?
  grade     String?
  @@unique([schoolId, grade])
  subjects  Subject[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Subject {
  id        String   @id @default(uuid())
  grade     Grade?   @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  gradeId   String?
  subject   String?
  @@unique([gradeId, subject])
  topics    Topic[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Topic {
  id        String     @id @default(uuid())
  subject   Subject?   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId String?
  topic     String?    
  @@unique([subjectId, topic])
  subTopics SubTopic[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model SubTopic {
  id        String      @id @default(uuid())
  topic     Topic?      @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId   String?
  subTopic  String?  
  @@unique([topicId, subTopic])
  questions Question[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Question {
  id              String         @id @default(uuid())
  subTopic        SubTopic?      @relation(fields: [subTopicId], references: [id], onDelete: Cascade)
  subTopicId      String?
  question        String?        
  @@unique([subTopicId, question])
  type            QuestionType
  difficultyLevel DifficultyLevel
  answers         Answer[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Answer {
  id         String     @id @default(uuid())
  question   Question?  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String?
  answer     String?    @unique
  type       QuestionType
  isCorrect  Boolean
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}
